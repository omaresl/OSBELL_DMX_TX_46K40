
# 1 "app/app_convert.c"

# 39 "Headers\stdtypedef.h"
typedef unsigned char T_UBYTE;
typedef unsigned short T_UWORD;
typedef unsigned long T_ULONG;
typedef signed char T_SBYTE;
typedef signed short T_SWORD;
typedef signed long T_SLONG;
typedef unsigned int T_FLAG_ARRAY;


typedef void(*T_PPROC)(void);


typedef T_UBYTE * PTR_UBYTE;
typedef T_UWORD * PTR_UWORD;
typedef T_ULONG * PTR_ULONG;
typedef T_SBYTE * PTR_SBYTE;
typedef T_SWORD * PTR_SWORD;
typedef T_SLONG * PTR_SLONG;

typedef T_UBYTE T_BOOLEAN;

# 73
typedef struct {
unsigned int bit0:1;
unsigned int bit1:1;
unsigned int bit2:1;
unsigned int bit3:1;
unsigned int bit4:1;
unsigned int bit5:1;
unsigned int bit6:1;
unsigned int bit7:1;
}T_BITFLD8;

typedef struct {
unsigned int bit15:1;
unsigned int bit14:1;
unsigned int bit13:1;
unsigned int bit12:1;
unsigned int bit11:1;
unsigned int bit10:1;
unsigned int bit9:1;
unsigned int bit8:1;
unsigned int bit7:1;
unsigned int bit6:1;
unsigned int bit5:1;
unsigned int bit4:1;
unsigned int bit3:1;
unsigned int bit2:1;
unsigned int bit1:1;
unsigned int bit0:1;
}T_BITFLD16;


typedef struct {
unsigned int bit31:1;
unsigned int bit30:1;
unsigned int bit29:1;
unsigned int bit28:1;
unsigned int bit27:1;
unsigned int bit26:1;
unsigned int bit25:1;
unsigned int bit24:1;
unsigned int bit23:1;
unsigned int bit22:1;
unsigned int bit21:1;
unsigned int bit20:1;
unsigned int bit19:1;
unsigned int bit18:1;
unsigned int bit17:1;
unsigned int bit16:1;
unsigned int bit15:1;
unsigned int bit14:1;
unsigned int bit13:1;
unsigned int bit12:1;
unsigned int bit11:1;
unsigned int bit10:1;
unsigned int bit9:1;
unsigned int bit8:1;
unsigned int bit7:1;
unsigned int bit6:1;
unsigned int bit5:1;
unsigned int bit4:1;
unsigned int bit3:1;
unsigned int bit2:1;
unsigned int bit1:1;
unsigned int bit0:1;
}T_BITFLD32;


typedef union{
T_UWORD wo;
struct{
T_UBYTE msb;
T_UBYTE lsb;
}by;
}T_BYTEFLD;


typedef union{
T_ULONG lo;
struct {
T_UBYTE highword_msb;
T_UBYTE highword_lsb;
T_UBYTE lowword_msb;
T_UBYTE lowword_lsb;
} by;

struct {
T_UWORD highword;
T_UWORD lowword;
} wo;

}T_BYTEFLD32;


typedef union {
T_UBYTE by;
T_BITFLD8 bi;
}T_FLAG8;


typedef union {
T_BYTEFLD cr;
T_BITFLD16 bi;
}T_FLAG16;


typedef union {
T_BYTEFLD32 cr;
T_BITFLD32 bi;
}T_FLAG32;


typedef enum
{
BFALSE = 0u,
BTRUE
}E_BOOLEAN;

# 11 "app/app_convert.h"
extern void bin2bcd(T_UWORD luw_Bin_Data);
extern void bcd2ascii(void);
extern T_UBYTE bcd27seg(T_UWORD luw_BCDData);

extern T_UWORD rub_BCDUni,
rub_BCDDec,
rub_BCDCen,
rub_BCDUmil,
rub_BCDDmil,
rub_BCDCmil;

# 12 "app/app_convert.c"
T_UWORD rub_BCDUni = 0,
rub_BCDDec = 0,
rub_BCDCen = 0,
rub_BCDUmil = 0,
rub_BCDDmil = 0,
rub_BCDCmil = 0;
const T_UBYTE rub_7segSymbols[16] = { 0b11000000,
0b11111001,
0b10100100,
0b10110000,
0b10011001,
0b10010010,
0b10000010,
0b11111000,
0b10000000,
0b10011000,
0b10001000,
0b10000011,
0b11000110,
0b10100001,
0b10000110,
0b10001110,
};
void bin2bcd(T_UWORD luw_Bin_Data){
T_UWORD luw_aux;
luw_aux = luw_Bin_Data;
rub_BCDCmil = (luw_aux / 100000);
luw_aux = (luw_aux - (rub_BCDCmil*100000));
rub_BCDDmil = (luw_aux / 10000);
luw_aux = (luw_aux - (rub_BCDDmil*10000));
rub_BCDUmil = (luw_aux / 1000);
luw_aux = (luw_aux - (rub_BCDUmil*1000));
rub_BCDCen = (luw_aux / 100);
luw_aux = (luw_aux - (rub_BCDCen*100));
rub_BCDDec = (luw_aux / 10);
luw_aux = (luw_aux - (rub_BCDDec*10));
rub_BCDUni = (luw_aux);
}

void bcd2ascii(void)
{
rub_BCDUni += 0x30;
rub_BCDDec += 0x30;
rub_BCDCen += 0x30;
rub_BCDUmil += 0x30;
rub_BCDDmil += 0x30;
rub_BCDCmil += 0x30;
}

T_UBYTE bcd27seg(T_UWORD luw_BCDData){
if(luw_BCDData <= 0x000f){
return(rub_7segSymbols[luw_BCDData]);
}
else{
return(luw_BCDData >> 4);
}
}
